# main.py
import os
import tempfile
import logging
import shutil
from typing import Optional
from fastapi import FastAPI, HTTPException
from fastapi.responses import HTMLResponse
from fastapi.staticfiles import StaticFiles
from pydantic import BaseModel
import google.generativeai as genai
from moviepy.editor import VideoFileClip
from pydub import AudioSegment
import yt_dlp
from langdetect import detect

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è FastAPI
app = FastAPI()

# HTML —à–∞–±–ª–æ–Ω –¥–ª—è –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
HTML_TEMPLATE = """
<!DOCTYPE html>
<html>
<head>
    <title>TikTok Transcriber</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css" rel="stylesheet">
    <style>
        body { padding: 20px; }
        .result-box {
            min-height: 200px;
            margin: 10px 0;
            padding: 10px;
            border: 1px solid #ddd;
            border-radius: 5px;
        }
    </style>
</head>
<body>
    <div class="container">
        <h1 class="mb-4">üì± TikTok Transcriber</h1>
        
        <div class="row mb-3">
            <div class="col">
                <input type="text" id="tiktokUrl" class="form-control" placeholder="–í—Å—Ç–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ TikTok –≤–∏–¥–µ–æ">
            </div>
        </div>
        
        <div class="row mb-3">
            <div class="col">
                <select id="language" class="form-select">
                    <option value="en">English</option>
                    <option value="ru">–†—É—Å—Å–∫–∏–π</option>
                    <option value="lt">Lietuvi≈≥</option>
                </select>
            </div>
            <div class="col">
                <button onclick="processVideo()" class="btn btn-primary">–û–±—Ä–∞–±–æ—Ç–∞—Ç—å</button>
            </div>
        </div>
        
        <div class="row">
            <div class="col-md-6">
                <h3>Transcription</h3>
                <div id="transcription" class="result-box">
                    <button onclick="copyText('transcription')" class="btn btn-sm btn-secondary">Copy</button>
                    <div class="content"></div>
                </div>
            </div>
            <div class="col-md-6">
                <h3>Summary</h3>
                <div id="summary" class="result-box">
                    <button onclick="copyText('summary')" class="btn btn-sm btn-secondary">Copy</button>
                    <div class="content"></div>
                </div>
            </div>
        </div>
    </div>

    <script>
        async function processVideo() {
            const url = document.getElementById('tiktokUrl').value;
            const lang = document.getElementById('language').value;
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–≥—Ä—É–∑–∫–∏
            document.getElementById('transcription').querySelector('.content').innerText = 'Processing...';
            document.getElementById('summary').querySelector('.content').innerText = 'Processing...';
            
            try {
                const response = await fetch('/process', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({
                        url: url,
                        target_language: lang
                    })
                });
                
                const data = await response.json();
                
                document.getElementById('transcription').querySelector('.content').innerText = data.transcription;
                document.getElementById('summary').querySelector('.content').innerText = data.summary;
            } catch (error) {
                alert('Error processing video: ' + error);
            }
        }
        
        function copyText(elementId) {
            const text = document.getElementById(elementId).querySelector('.content').innerText;
            navigator.clipboard.writeText(text);
        }
    </script>
</body>
</html>
"""

# –ú–æ–¥–µ–ª—å –¥–ª—è –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
class VideoRequest(BaseModel):
    url: str
    target_language: str

class TikTokProcessor:
    def __init__(self):
        api_key = os.getenv('GOOGLE_API_KEY')
        if not api_key:
            raise ValueError("Google API key not found")
        
        genai.configure(api_key=api_key)
        self.model = genai.GenerativeModel('gemini-1.5-pro')
        self.temp_dir = tempfile.mkdtemp()

    def process_video(self, url: str, target_language: str):
        try:
            # –ó–∞–≥—Ä—É–∑–∫–∞ –≤–∏–¥–µ–æ
            video_path = self._download_video(url)
            
            # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∞—É–¥–∏–æ
            audio_path = self._extract_audio(video_path)
            
            # –¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏—è
            transcript = self._transcribe_audio(audio_path)
            
            # –°–∞–º–º–∞—Ä–∏
            summary = self._generate_summary(transcript, target_language)
            
            return transcript, summary
            
        finally:
            if os.path.exists(self.temp_dir):
                shutil.rmtree(self.temp_dir)
                self.temp_dir = tempfile.mkdtemp()

    def _download_video(self, url: str) -> str:
        file_id = os.urandom(4).hex()
        ydl_opts = {
            'format': 'best',
            'outtmpl': os.path.join(self.temp_dir, f'video_{file_id}.%(ext)s'),
            'quiet': True
        }
        
        with yt_dlp.YoutubeDL(ydl_opts) as ydl:
            info = ydl.extract_info(url, download=True)
            return ydl.prepare_filename(info)

    def _extract_audio(self, video_path: str) -> str:
        video = VideoFileClip(video_path)
        audio_path = os.path.join(self.temp_dir, 'audio.mp3')
        video.audio.write_audiofile(audio_path, codec='mp3', verbose=False)
        video.close()
        return audio_path

    def _transcribe_audio(self, audio_path: str) -> str:
        with open(audio_path, 'rb') as f:
            audio_data = f.read()

        response = self.model.generate_content([
            "Transcribe this audio accurately, preserving all details and context.",
            {
                "mime_type": "audio/mp3",
                "data": audio_data
            }
        ])
        return response.text

    def _generate_summary(self, text: str, target_language: str) -> str:
        language_prompts = {
            'en': 'Generate a comprehensive summary in English:',
            'ru': '–°–æ—Å—Ç–∞–≤—å—Ç–µ –ø–æ–¥—Ä–æ–±–Ω–æ–µ —Ä–µ–∑—é–º–µ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ:',
            'lt': 'Sukurkite i≈°samiƒÖ santraukƒÖ lietuvi≈≥ kalba:'
        }
        
        prompt = f"{language_prompts.get(target_language, language_prompts['en'])} {text}"
        response = self.model.generate_content(prompt)
        return response.text

# –ú–∞—Ä—à—Ä—É—Ç—ã FastAPI
@app.get("/", response_class=HTMLResponse)
async def read_root():
    return HTML_TEMPLATE

@app.post("/process")
async def process_video(request: VideoRequest):
    processor = TikTokProcessor()
    try:
        transcript, summary = processor.process_video(request.url, request.target_language)
        return {"transcription": transcript, "summary": summary}
    except Exception as e:
        raise HTTPException(status_code=400, detail=str(e))

